{"version":3,"sources":["components/AddCategory.jsx","GifGrillItem.jsx","helpers/getGifs.jsx","components/GifGrill.jsx","hooks/useFetchGifs.jsx","GifExpertApp.jsx","reportWebVitals.js","index.jsx"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","item","type","value","onChange","target","GifGrillItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","respuesta","json","data","gifs","map","img","images","downsized_medium","GifGrill","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAkB9C,OACI,sBAAMC,SAXY,SAACC,GACnBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GACV,MAAM,CAAEP,GAAR,mBAAuBO,OAE3BN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAnBe,SAACP,GACxBF,EAAcE,EAAEQ,OAAOF,a,QCLlBG,EAAe,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACtC,OACI,sBAAKC,UAAU,2DAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCNHK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbN,EADa,gDACkCO,UAAUF,GAD5C,+DAEKG,MAAMR,GAFX,cAEbS,EAFa,gBAGIA,EAAUC,OAHd,uBAGXC,EAHW,EAGXA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QARvB,kBAWZY,GAXY,4CAAH,sDCIPK,EAAW,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECFd,SAACA,GAAc,IAAD,EACZrB,mBAAS,CAC/B2B,KAAM,GACNO,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAgBtC,OAVAC,qBAAU,WACNjB,EAAQC,GACHiB,MAAK,SAAAC,GACFH,EAAS,CACLT,KAAMY,EACNL,SAAS,SAGtB,CAACb,IAEGc,EDb2BK,CAAanB,GAAjCU,EADwB,EAC9BJ,KAAcO,EADgB,EAChBA,QACtB,OACI,qCACI,oBAAIjB,UAAU,mCAAd,SAAkDI,IACjDa,GAAW,mBAAGjB,UAAU,mCAAb,qBACZ,qBAAKA,UAAU,YAAf,SAEQc,EAAOF,KAAI,SAACC,GACR,OACI,cAAC,EAAD,eAEQA,GADCA,EAAIhB,aEZ5B2B,EAAe,WAAO,IAAD,EAEMzC,mBAAS,CAAC,aAFhB,mBAEvB0C,EAFuB,KAEX3C,EAFW,KAI9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ2C,EAAWb,KAAI,SAAArB,GAAI,OACf,cAAC,EAAD,CAEIa,SAAUb,GADLA,YCNlBmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCDdO,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.08550fe4.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handlerInputChange = (e) => {\n        setInputValue(e.target.value)\n    }\n\n    const handlerSubmit = (e) => {\n        e.preventDefault();\n        if (inputValue.trim().length > 2) {\n            setCategories(item => {\n                return [inputValue, ...item];\n            });\n            setInputValue('');\n        }\n    }\n\n    return (\n        <form onSubmit={handlerSubmit}>\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handlerInputChange} />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\n\n","import React from 'react'\n\n\nexport const GifGrillItem = ({ id, title, url }) => {\n    return (\n        <div className=\"card animate__animated animate__bounce animate__delay-2s\">\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n","\nexport const getGifs = async (category) => {\n    const url = `http://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=XhwRCygzgJXDaU0nR95FCu8XjBUdPPsG`;\n    const respuesta = await fetch(url)\n    const { data } = await respuesta.json();\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n    return gifs;\n}","\nimport React from 'react'\nimport { GifGrillItem } from '../GifGrillItem';\nimport { useFetchGifs } from '../hooks/useFetchGifs'\n\nexport const GifGrill = ({ category }) => {\n    const { data: images, loading } = useFetchGifs(category);\n    return (\n        <>\n            <h3 className=\"animate__animated animate_fadeIn\">{category}</h3>\n            {loading && <p className=\"animate__animated animate__flash\">loading</p>}\n            <div className=\"card-grid\">\n                {\n                    images.map((img) => {\n                        return (\n                            <GifGrillItem\n                                key={img.id}\n                                {...img} />\n                        )\n                    })\n                }\n\n            </div>\n        </>\n\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\"\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    })\n\n    useEffect(() => {\n        getGifs(category)\n            .then(imgs => {\n                setState({\n                    data: imgs,\n                    loading: false\n                })\n            })\n    }, [category])\n\n    return state;\n}","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory'\nimport { GifGrill } from './components/GifGrill'\n\nexport const GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['Son goku'])\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories} />\n            <hr />\n\n            <ol>\n                {\n                    categories.map(item => (\n                        <GifGrill\n                            key={item}\n                            category={item} />\n                    ))\n                }\n            </ol>\n        </>\n    )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css'\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}